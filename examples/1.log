--- Settings ---
gamble-size = 2
k-size = 2
coordinate-bound = 4
count = 1

--- testcase 1 ---
K = [[0, 2], [2, -4]]
p = [22/125, 103/125]
P_p = [([0, 2], 206/125), ([2, -4], -368/125)]
A = [[-206/125, 44/125], [618/125, -132/125]]
R = [
  [[1, 0], [0, 1], [-206/125, 44/125], [618/125, -132/125]]
]
--- variables ---
[lambda0]
[[nu0_0, nu0_1, nu0_2, nu0_3]]
--- constants ---
g = [[[1, 0], [0, 1], [-206/125, 44/125], [618/125, -132/125]]]
f = [0, 0]
--- intermediate expressions ---
h = [lambda0*(nu0_0 + -206/125*nu0_2 + 618/125*nu0_3), lambda0*(nu0_1 + 44/125*nu0_2 + -132/125*nu0_3)]
--- constraints ---
[lambda0 > 0]
[nu0_0 >= 0, nu0_1 >= 0, nu0_2 >= 0, nu0_3 >= 0, Or(nu0_0 > 0, nu0_1 > 0, nu0_2 > 0, nu0_3 > 0)]
[0 == lambda0*(nu0_0 + -206/125*nu0_2 + 618/125*nu0_3), 0 == lambda0*(nu0_1 + 44/125*nu0_2 + -132/125*nu0_3)]
--- solution ---
lambda = [1]
nu = [[0, 0, 1, 1/3]]
incurs_sure_loss(P_p, Omega): True 0.0282s

