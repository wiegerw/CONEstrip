--- Settings ---
gamble-size = 2
k-size = 2
coordinate-bound = 4
count = 1
pretty = True
verbose = True

--- testcase 1 ---
K = [[-2.0, -3.0], [-2.0, -1.0]]
p = [0.885, 0.115]
P_p = [([-2.0, -3.0], -2.115), ([-2.0, -1.0], -1.885)]
A = [[0.115, -0.885], [-0.115, 0.885]]
R = [
  [[1.0, 0.0], [0.0, 1.0], [0.115, -0.885], [-0.115, 0.885]]
]
--- variables ---
[lambda0]
[[nu0_0, nu0_1, nu0_2, nu0_3]]
--- constants ---
g = [[[1, 0], [0, 1], [23/200, -177/200], [-23/200, 177/200]]]
f = [0, 0]
--- intermediate expressions ---
h = [lambda0*(nu0_0 + 23/200*nu0_2 + -23/200*nu0_3), lambda0*(nu0_1 + -177/200*nu0_2 + 177/200*nu0_3)]
--- constraints ---
[lambda0 > 0]
[nu0_0 >= 0, nu0_1 >= 0, nu0_2 >= 0, nu0_3 >= 0, Or(nu0_0 > 0, nu0_1 > 0, nu0_2 > 0, nu0_3 > 0)]
[0 == lambda0*(nu0_0 + 23/200*nu0_2 + -23/200*nu0_3), 0 == lambda0*(nu0_1 + -177/200*nu0_2 + 177/200*nu0_3)]
--- solution ---
lambda = [1]
nu = [[0, 0, 1, 1]]
incurs_sure_loss(P_p, Omega): True 0.0274s
