# Copyright 2021 Wieger Wesselink.
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE or http://www.boost.org/LICENSE_1_0.txt)

# Functions for generating random cones.

import random
from typing import List, Tuple
from z3 import *
from conestrip.cones import Gamble, gambles_to_polyhedron, ConeGenerator, GeneralCone, ConvexCombination, \
    linear_combination
from conestrip.utility import inner_product, random_nonzero_rationals_summing_to_one


def remove_redundant_vertices(vertices: List[Gamble]) -> List[Gamble]:
    poly = gambles_to_polyhedron(vertices)
    return poly.vertices()


# randomly generate a vector in R^n with integer coefficients in the range [-bound, ..., bound]
def random_vector(n: int, bound: int) -> List[Fraction]:
    return [Fraction(random.randrange(-bound, bound+1)) for _ in range(n)]


# randomly generate a vector in R^n with real coefficients in the range [-bound, ..., bound]
def random_real_vector(n: int, bound: int, decimals: int = 3) -> List[Fraction]:
    return [Fraction(round(random.uniform(-bound, bound+1), decimals)).limit_denominator() for _ in range(n)]


# randomly generate count n-dimensional gambles with coefficients in the range [-bound, ..., bound]
def random_real_gambles(count: int, n: int, bound: int, decimals: int = 3) -> List[Gamble]:
    return [random_real_vector(n, bound, decimals) for _ in range(count)]


def random_cone_generator(dimension: int, generator_size: int, bound: int, normal=None) -> ConeGenerator:
    """
    Generates a random cone generator.
    @param dimension: The size of the gambles in the cone generator.
    @param generator_size: The number of gambles in the cone generator.
    @param bound: The largest absolute value of the coordinates.
    @param normal: The normal vector of a half space (optional).
    @return: The generated cone generator.
    """
    n = dimension

    normal = None
    while not normal:
        normal = random_vector(n, bound)

    # randomly generate x such that inner_product(normal, x) > 0
    def generate() -> List[Fraction]:
        while True:
            x = random_vector(n, bound)
            if inner_product(normal, x) > 0:
                return x

    # generate size points in { x \in R^n | inner_product(normal, x) > 0 }
    vertices = []
    while len(vertices) < generator_size:
        vertices = vertices + [generate() for _ in range(generator_size - len(vertices))]
        vertices = remove_redundant_vertices(vertices)

    return vertices


def random_general_cone(cone_size: int, dimension: int, generator_size: int, bound: int) -> GeneralCone:
    return [random_cone_generator(dimension, generator_size, bound) for _ in range(cone_size)]


def random_inside_point(R: ConeGenerator) -> Tuple[Gamble, ConvexCombination]:
    """
    Generates a random point that is inside the cone generated by R
    @param R:
    @return:
    """

    m = len(R)
    lambda_ = random_nonzero_rationals_summing_to_one(m)
    return linear_combination(lambda_, R), lambda_
